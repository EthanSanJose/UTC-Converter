def seconds_difference(time_1, time_2):
    """ (number, number) -> number

    Return the number of seconds later that a time in seconds
    time_2 is than a time in seconds time_1.
        
    >>> seconds_difference(1800.0, 3600.0)
    1800.0
    >>> seconds_difference(3600.0, 1800.0)
    -1800.0
    >>> seconds_difference(1800.0, 2160.0)
    360.0
    >>> seconds_difference(1800.0, 1800.0)
    0.0
    """
    return(time_2 - time_1)
    


def hours_difference(time_1, time_2):
    """ (number, number) -> float

    Return the number of hours later that a time in seconds
    time_2 is than a time in seconds time_1.
        
    >>> hours_difference(1800.0, 3600.0)
    0.5
    >>> hours_difference(3600.0, 1800.0)
    -0.5
    >>> hours_difference(1800.0, 2160.0)
    0.1
    >>> hours_difference(1800.0, 1800.0)
    0.0
    """
    return(time_2 - time_1) / 3600
    



def to_float_hours(hours, minutes, seconds):
    """ (int, int, int) -> float

    Return the total number of hours in the specified number
    of hours, minutes, and seconds.

    Precondition: 0 <= minutes < 60  and  0 <= seconds < 60

    >>> to_float_hours(0, 15, 0)
    0.25
    >>> to_float_hours(2, 45, 9)
    2.7525
    >>> to_float_hours(1, 0, 36)
    1.01
    """
    to_float_hours = hours + minutes / 60 + seconds / 3600
    return(to_float_hours)



def to_24_hour_clock(hours):
    """ (number) -> number

    hours is a number of hours since midnight. Return the
    hour as seen on a 24-hour clock.

    Precondition: hours >= 0

    >>> to_24_hour_clock(24)
    0
    >>> to_24_hour_clock(48)
    0
    >>> to_24_hour_clock(25)
    1
    >>> to_24_hour_clock(4)
    4
    >>> to_24_hour_clock(28.5)
    4.5
    """
    return hours % 24


def get_hours(seconds):
    '''(int) -> int

    turns the recieved seconds into hours

    precondition: 0 <= hours < 24

    >>>get_hours(7200)
    2
    >>>get_hours(9000)
    2
    >>>get_hours(11376)
    3
    '''
    return to_24_hour_clock(seconds // 3600)
    
    
def get_minutes(seconds):
    '''(int) -> int

    return the remainder of minutes after determined the number of hours as respect for the number of seconds that have elapsed since midnight

    Precondition: 0 <= minutes < 59

    >>>get_minutes(7200)
    0
    >>>get_minutes(9000)
    30
    >>>get_minutes(11376)
    9
    '''

    result = seconds % 3600
    return result // 60     



def get_seconds(seconds):
    '''(int) -> int

    return the remind of seconds after determined the number of minutes and hours as respect for the amount of seconds that have elapsed since midnight

    Precondition: 0 <= seconds < 59
      
    >>>get_seconds(3800)
    20
    >>>get_seconds(3600)
    0
    >>>get_seconds(912)
    12
    '''
    seconds = (seconds - get_hours(seconds) * 3600) / 60 - get_minutes(seconds)
    result = seconds * 60
    return int(result)
    


def time_to_utc(utc_offset, time):
    """ (number, float) -> float

    Return time at UTC+0, where utc_offset is the number of hours away from
    UTC+0.

    >>> time_to_utc(+0, 12.0)
    12.0
    >>> time_to_utc(+1, 12.0)
    11.0
    >>> time_to_utc(-1, 12.0)
    13.0
    >>> time_to_utc(-11, 18.0)
    5.0
    >>> time_to_utc(-1, 0.0)
    1.0
    >>> time_to_utc(-1, 23.0)
    0.0
    >>> time_to_utc(-11, 18.59)
    5.59
    """
    hours = time - utc_offset
    return (time - utc_offset) % 24
    
    
def time_from_utc(utc_offset, time):
    """ (number, float) -> float

    Return UTC time in time zone